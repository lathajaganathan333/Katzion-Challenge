@isTest
public class TransactionHandlerTest {
    // Define a mock class for HTTP callouts
    public class MockHttpResponseGenerator implements HttpCalloutMock {
        public HttpResponse respond(HttpRequest req) {
            // Create and return a mock HTTP response
            HttpResponse res = new HttpResponse();
            res.setHeader('Content-Type', 'application/json');
            res.setBody('{"success": true}');
            res.setStatusCode(200);
            return res;
        }
    }
    
    @isTest
    static void testTransactionItemHandler() {
        // Set the HTTP mock for callouts
        Test.setMock(HttpCalloutMock.class, new MockHttpResponseGenerator());
        
        // Create test data (Transaction_Item__c and Transaction__c records)
        Transaction__c trn = new Transaction__c(Transaction_Count__c = 2, name='TRN001',Total_Cost__c=12.45);
        insert new List<Transaction__c>{trn};
        
        Transaction_Item__c tli1 = new Transaction_Item__c(Name = 'Item 1', Transaction__c = trn.Id, Item_Cost__c = 100);
        Transaction_Item__c tli2 = new Transaction_Item__c(Name = 'Item 2', Transaction__c = trn.Id, Item_Cost__c = 150);
        insert new List<Transaction_Item__c> { tli1, tli2 };
        
        // Call the method under test (transactionItemCallout)
         List<Transaction__c> trnList = new List<Transaction__c>{trn};
        List<Transaction_Item__c> tliList = new List<Transaction_Item__c> { tli1, tli2 };
        TransactionItemHandler.transactionItemCallout(tliList);
        
        
        // Perform assertions based on the expected behaviour
        System.assertEquals(2, tliList.size(), 'Transaction lines size  is not correct');
        System.assertEquals(1, trnList.size(), 'Transaction  size  is not correct');
        System.assert(trnList.size()!=0);
        System.assertNotEquals(0, tliList.size());
       
    }
}
